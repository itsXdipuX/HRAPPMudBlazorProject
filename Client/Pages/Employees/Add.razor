@page "/employee/add"
@using HRAppMudBlazorProject.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.ComponentModel.DataAnnotations
@inject HttpClient _httpClient
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<MudContainer MaxWidth="MaxWidth.Small">
    <EditForm Model="@employee" OnValidSubmit="Save">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="12">
                <h3>Add Employee</h3>
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Name" Variant="Variant.Outlined"
                                      @bind-Value="employee.Name" For="@(() => employee.Name)" />
                        <MudDatePicker Label="Join Date" ShowWeekNumbers="true" @bind-Date="employee.JoinDate" Variant="Variant.Outlined" />
                        <MudTextField Variant="Variant.Outlined" Label="Address" Class="mt-3"
                                      @bind-Value="employee.Address" For="@(() => employee.Address)" />
                        <MudTextField Variant="Variant.Outlined" Label="Email" Class="mt-3"
                                      @bind-Value="employee.Email" For="@(() => employee.Email)" />
                        <MudTextField Variant="Variant.Outlined" Label="Contact Number" Class="mt-3"
                                      @bind-Value="employee.ContactNumber" For="@(() => employee.ContactNumber)" />

                        <div class="form-group">
                            <label>Gender*</label>
                            <InputSelect @bind-Value="employee.Sex" Label="Gender" Class="form-control">
                                @foreach (var gender in Enum.GetValues(typeof(Gender)))
                                {
                                    <option value="@gender">@gender</option>
                                }
                            </InputSelect>
                        </div>

                        @*  <MudSelect Variant="Variant.Outlined" Label="Gender"
                            @bind-Value="employee.Sex" Class="mt-3">
                            @*<MudSelectItem Value="0">--- Select ---</MudSelectItem>
                            @foreach (var gender in Enum.GetValues(typeof(Gender)))
                            {
                            <MudSelectItem Value="gender">@gender</MudSelectItem>
                            }
                            </MudSelect>*@

                        <MudSelect Variant="Variant.Outlined" Label="Department"
                                   @bind-Value="employee.DepartmentID" Class="mt-3">
                            <MudSelectItem Value="0">--- Select ---</MudSelectItem>
                            @foreach (var department in departments)
                            {
                                <MudSelectItem Value="@department.ID">@department.DeptName</MudSelectItem>
                            }
                        </MudSelect>

                        <MudSelect Variant="Variant.Outlined" Label="Designation"
                                   @bind-Value="employee.DesignationID" Class="mt-3">
                            <MudSelectItem Value="0">--- Select ---</MudSelectItem>
                            @foreach (var designation in designations)
                            {
                                <MudSelectItem Value="@designation.ID">@designation.DesignationName</MudSelectItem>
                            }
                        </MudSelect>


                    </MudCardContent>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-4 mb-4">Add</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Class="ml-4 mb-4" OnClick="Cancel">Cancel</MudButton>
                </MudCard>
            </MudItem>

        </MudGrid>
    </EditForm>
</MudContainer>

@code {
    DateTime? date = DateTime.Today;
    Employee employee = new Employee();

    private List<Department> departments = new();
    private List<Designation> designations = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            departments = await Http.GetFromJsonAsync<List<Department>>("api/Departments");
            designations = await Http.GetFromJsonAsync<List<Designation>>("api/Designations");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task Save()
    {
        var response = await Http.PostAsJsonAsync("api/Employees", employee);
        Employee? posResponse = await response.Content.ReadFromJsonAsync<Employee>();
        if (posResponse?.ID > 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
            NavigationManager.NavigateTo("employee");
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("employee");
    }

    private void OnValidSubmit(EditContext context)
    {
        //success = true;
        StateHasChanged();
    }



}